name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            #!/bin/bash
            set -e
            
            echo "Starting deployment..."
            
            # Navigate to project directory
            cd /opt/BuchartGames
            
            # Pull latest changes
            echo "Pulling latest code from GitHub..."
            git fetch origin
            git reset --hard origin/main
            
            # Backup database before deployment
            echo "Creating database backup..."
            timestamp=$(date +%Y%m%d-%H%M%S)
            if [ -f instance/gamenight.db ]; then
              cp instance/gamenight.db instance/gamenight.db.backup-$timestamp
              echo "Database backed up to: gamenight.db.backup-$timestamp"
            fi
            
            # Build new image
            echo "Building Docker image..."
            docker compose build --no-cache web
            
            # Run database migrations (before stopping old container)
            echo "Running database migrations..."
            docker compose run --rm web flask db upgrade || echo "Migration warning (continuing)"
            
            # Restart with zero-downtime (recreate only changed containers)
            echo "Restarting application..."
            docker compose up -d --no-deps --build web
            
            # Wait for health check
            echo "Waiting for application to be healthy..."
            sleep 10
            
            # Verify deployment
            if docker compose ps | grep -q "healthy"; then
              echo "Deployment successful!"
            
              # Cleanup old images
              echo "Cleaning up old Docker images..."
              docker image prune -f
            
              # Keep only last 7 database backups
              find instance/ -name "gamenight.db.backup-*" -mtime +7 -delete
            
              echo "Deployment complete!"
            else
              echo "Deployment failed - container not healthy"
              echo "Recent logs:"
              docker compose logs --tail=50 web
              exit 1
            fi


      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed! Check the logs above."
